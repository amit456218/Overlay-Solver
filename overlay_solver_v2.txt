import sys
import threading
import time
import json
import requests
from dataclasses import dataclass
from typing import Optional
import ctypes
from ctypes import wintypes
import win32gui
import win32con
import win32api

from PyQt5.QtWidgets import (QApplication, QWidget, QTextEdit, QVBoxLayout, 
                           QHBoxLayout, QPushButton, QLabel)
from PyQt5.QtCore import Qt, QTimer, pyqtSignal, QObject
from PyQt5.QtGui import QPainter, QColor, QFont, QIcon

import keyboard  # pip install keyboard
from PIL import ImageGrab, Image, ImageEnhance  # pip install pillow
import pytesseract  # pip install pytesseract
from pytesseract import TesseractNotFoundError

# Windows stealth constants for undetectability
WS_EX_LAYERED       = 0x80000
WS_EX_TRANSPARENT   = 0x20
WS_EX_NOACTIVATE    = 0x08000000
WS_EX_TOOLWINDOW    = 0x00000080
GWL_EXSTYLE         = -20
WDA_EXCLUDEFROMCAPTURE = 0x00000011  # Windows 10+ exclude from capture

# Bind to user32 for display affinity
user32 = ctypes.windll.user32

@dataclass
class Config:
    OPENAI_API_KEY: str    = 'KEY'
    TESSERACT_PATH: str    = r"C:\Program Files\Tesseract-OCR\tesseract.exe"
    ISLAND_WIDTH: int      = 700
    ISLAND_HEIGHT: int     = 90
    SOLUTION_WIDTH: int    = 900
    SOLUTION_HEIGHT: int   = 600
    TOGGLE_KEY: str        = 'ctrl+]'
    CAPTURE_KEY: str       = 'ctrl+shift+]'
    QUIT_KEY: str          = 'ctrl+q'

class StealthWidget(QWidget):
    """Base widget with undetectable flags and excluded from screen capture"""
    def __init__(self):
        super().__init__()
        self.setup_stealth()

    def setup_stealth(self):
        self.setWindowFlags(
            Qt.FramelessWindowHint |
            Qt.WindowStaysOnTopHint |
            Qt.Tool |
            Qt.WindowDoesNotAcceptFocus
        )
        self.setAttribute(Qt.WA_TranslucentBackground)
        self.setAttribute(Qt.WA_ShowWithoutActivating)

    def showEvent(self, event):
        super().showEvent(event)
        if sys.platform == 'win32':
            self.apply_windows_stealth()

    def apply_windows_stealth(self):
        hwnd = int(self.winId())
        ex = win32gui.GetWindowLong(hwnd, GWL_EXSTYLE)
        ex |= (WS_EX_LAYERED | WS_EX_TRANSPARENT | WS_EX_TOOLWINDOW | WS_EX_NOACTIVATE)
        win32gui.SetWindowLong(hwnd, GWL_EXSTYLE, ex)
        user32.SetWindowDisplayAffinity(hwnd, WDA_EXCLUDEFROMCAPTURE)

class APIWorker(QObject):
    """Worker to call OpenAI without blocking UI"""
    solution_ready = pyqtSignal(str)
    error_occurred = pyqtSignal(str)
    def __init__(self, key):
        super().__init__()
        self.key = key
    def solve_problem(self, text):
        try:
            headers = {'Authorization': f'Bearer {self.key}', 'Content-Type': 'application/json'}
            payload = {
                'model': 'gpt-4',
                'messages': [
                    {'role': 'system', 'content': 'You are an elegant coding assistant.'},
                    {'role': 'user', 'content': text}
                ],
                'temperature': 0.2,
                'max_tokens': 2000
            }
            r = requests.post('https://api.openai.com/v1/chat/completions',
                              headers=headers, json=payload, timeout=30)
            if r.status_code == 200:
                sol = r.json()['choices'][0]['message']['content']
                self.solution_ready.emit(sol)
            else:
                self.error_occurred.emit(f"API {r.status_code}: {r.text}")
        except Exception as e:
            self.error_occurred.emit(str(e))

class SolutionPopup(StealthWidget):
    def __init__(self):
        super().__init__()
        self.resize(Config.SOLUTION_WIDTH, Config.SOLUTION_HEIGHT)
        self.setup_ui()

    def setup_ui(self):
        layout = QVBoxLayout(self)
        btn = QPushButton('âœ•', self)
        btn.setFixedSize(25,25)
        btn.setFont(QFont('Vendura',10))
        btn.setStyleSheet(
            "QPushButton{background:rgba(255,255,255,30);border:none;color:white;}"
            "QPushButton:hover{background:rgba(255,100,100,150);}"        )
        btn.clicked.connect(self.hide)
        hl = QHBoxLayout(); hl.addStretch(); hl.addWidget(btn)
        layout.addLayout(hl)
        self.area = QTextEdit(self)
        self.area.setReadOnly(True)
        code_font = QFont('Courier New', 11)
        self.area.setFont(code_font)
        self.area.setStyleSheet(
            "background:rgba(20,20,20,240);color:#E0E0E0;"
            "border-radius:8px;padding:10px;"
        )
        layout.addWidget(self.area)

    def apply_windows_stealth(self):
        super().apply_windows_stealth()
        hwnd = int(self.winId())
        ex = win32gui.GetWindowLong(hwnd, GWL_EXSTYLE)
        ex &= ~WS_EX_TRANSPARENT
        win32gui.SetWindowLong(hwnd, GWL_EXSTYLE, ex)

    def show_solution(self, sol):
        self.area.setPlainText(sol)
        self.area.setFocus()
        self.show()

class ScreenOverlay(StealthWidget):
    def __init__(self):
        super().__init__()
        self.cfg = Config()
        pytesseract.pytesseract.tesseract_cmd = self.cfg.TESSERACT_PATH
        self.worker = APIWorker(self.cfg.OPENAI_API_KEY)
        self.worker.solution_ready.connect(self.on_solution)
        self.worker.error_occurred.connect(self.on_error)
        self.popup = SolutionPopup()
        self.is_processing = False
        self.loading_dots = 0
        self.dot_timer = QTimer(self)
        self.dot_timer.timeout.connect(self.update_loading)
        self.setup_ui()

    def setup_ui(self):
        app = QApplication.instance()
        scr = app.primaryScreen().geometry()
        self.resize(self.cfg.ISLAND_WIDTH, self.cfg.ISLAND_HEIGHT)
        self.move((scr.width()-self.width())//2, 20)
        layout = QHBoxLayout(self)
        layout.setContentsMargins(25,15,25,15)
        instr = f"Show/Hide: {self.cfg.TOGGLE_KEY}  â€¢  Capture: {self.cfg.CAPTURE_KEY}  â€¢  Quit: {self.cfg.QUIT_KEY}"
        self.label = QLabel(instr, self)
        self.label.setFont(QFont('Vendura', 12))
        self.label.setStyleSheet('color:white;')
        layout.addWidget(self.label)
        layout.addStretch()
        cap = QPushButton('ðŸ“¸', self)
        cap.setFixedSize(50,50)
        cap.setFont(QFont('Vendura', 14))
        cap.setStyleSheet(
            "background:rgba(0,0,0,0);border:none;"
            "font-size:24px;color:white;"
        )
        cap.clicked.connect(self.capture_and_solve)
        layout.addWidget(cap)

    def paintEvent(self, event):
        painter = QPainter(self)
        painter.setRenderHint(QPainter.Antialiasing)
        painter.setBrush(QColor(0,0,0,200))
        painter.setPen(Qt.NoPen)
        painter.drawRoundedRect(self.rect(), 20, 20)

    def toggle_visibility(self):
        if self.isVisible():
            self.hide()
            self.popup.hide()
        else:
            self.show()
            QTimer.singleShot(100, self.apply_windows_stealth)

    def capture_and_solve(self):
        if self.is_processing: return
        self.is_processing = True
        self.loading_dots = 0
        self.dot_timer.start(400)
        self.label.setText('Solving')
        self.repaint()
        self.hide()
        QApplication.processEvents()
        time.sleep(0.3)
        im = ImageGrab.grab()
        self.show()
        QTimer.singleShot(100, self.apply_windows_stealth)
        text = self.extract_text(im)
        if text:
            threading.Thread(target=self.worker.solve_problem, args=(text,), daemon=True).start()
        else:
            self.dot_timer.stop()
            self.is_processing = False
            self.label.setText('No text detected')
            self.reset_status()

    def update_loading(self):
        self.loading_dots = (self.loading_dots + 1) % 4
        self.label.setText('Solving' + '.' * self.loading_dots)

    def extract_text(self, image):
        try:
            gray = image.convert('L')
            enh = ImageEnhance.Contrast(gray).enhance(2.0)
            scaled = enh.resize((enh.width*2, enh.height*2), Image.LANCZOS)
            cfg = '--oem 3 --psm 6'
            return pytesseract.image_to_string(scaled, config=cfg).strip()
        except TesseractNotFoundError:
            self.label.setText('Install Tesseract')
            return ''
        except:
            return ''

    def on_solution(self, sol):
        self.dot_timer.stop()
        self.is_processing = False
        self.reset_status()
        pos = self.pos()
        x = pos.x() + (self.width()-self.popup.width())//2
        y = pos.y() + self.height() + 10
        self.popup.move(x, y)
        self.popup.show_solution(sol)

    def on_error(self, err):
        self.dot_timer.stop()
        self.is_processing = False
        self.label.setText('Error occurred')
        print(err)
        self.reset_status()

    def reset_status(self):
        self.label.setText(f"Ready â€¢ {self.cfg.TOGGLE_KEY} | {self.cfg.CAPTURE_KEY} | {self.cfg.QUIT_KEY}")
        QTimer.singleShot(3000, self.repaint)


def setup_hotkeys(overlay):
    keyboard.add_hotkey(overlay.cfg.TOGGLE_KEY, overlay.toggle_visibility, suppress=True)
    keyboard.add_hotkey(overlay.cfg.CAPTURE_KEY, overlay.capture_and_solve, suppress=True)
    keyboard.add_hotkey(overlay.cfg.QUIT_KEY, lambda: QApplication.instance().quit(), suppress=True)


def main():
    QApplication.setAttribute(Qt.AA_EnableHighDpiScaling, True)
    app = QApplication(sys.argv)
    app.setQuitOnLastWindowClosed(False)
    overlay = ScreenOverlay()
    QTimer.singleShot(100, overlay.show)
    setup_hotkeys(overlay)
    sys.exit(app.exec_())

if __name__ == '__main__':
    main()


